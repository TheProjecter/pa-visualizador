/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DesktopFrame.java
 *
 * Created on 16/07/2010, 23:31:51
 */
package shapefile;

import com.svcon.jdbf.DBFReader;
import dbf.DBFdata;
import dbf.ModeloTabela;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import com.svcon.jdbf.JDBFException;
import java.awt.Dimension;

/**
 *
 * @author Carlos
 */
public class DesktopFrame extends javax.swing.JFrame {

    DisplayShapefile shapeView;
    String enderecoDBF;
    JTable tabelaDBF = new JTable();

    /** Creates new form DesktopFrame */
    public DesktopFrame() {

        super("Visualizador de Dados Geoespaciais");
        initComponents();
        Arquivo.setMnemonic('A');
        Abrir.setMnemonic('b');
        Sair.setMnemonic('S');
        scale.setText("");
        scale.setEditable(false);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ToolBar = new javax.swing.JToolBar();
        increaseZoom = new javax.swing.JButton();
        decreaseZoom = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        scale = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        MenuBar = new javax.swing.JMenuBar();
        Arquivo = new javax.swing.JMenu();
        Abrir = new javax.swing.JMenuItem();
        Sair = new javax.swing.JMenuItem();
        Editar = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ToolBar.setOrientation(1);
        ToolBar.setRollover(true);

        increaseZoom.setText("Zoom +");
        increaseZoom.setFocusable(false);
        increaseZoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        increaseZoom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        increaseZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseZoomActionPerformed(evt);
            }
        });
        ToolBar.add(increaseZoom);

        decreaseZoom.setText("Zoom -");
        decreaseZoom.setFocusable(false);
        decreaseZoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        decreaseZoom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        decreaseZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseZoomActionPerformed(evt);
            }
        });
        ToolBar.add(decreaseZoom);

        printButton.setText("Imprimir");
        printButton.setFocusable(false);
        printButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        ToolBar.add(printButton);

        jButton1.setText("Tabela");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TabelaButtonActionPerformed(evt);
            }
        });
        ToolBar.add(jButton1);

        scale.setColumns(20);
        scale.setRows(5);
        scale.setAutoscrolls(false);
        scale.setPreferredSize(new java.awt.Dimension(164, 10));
        jScrollPane1.setViewportView(scale);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 315, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );

        Arquivo.setText("Arquivo");

        Abrir.setText("Abrir");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        Arquivo.add(Abrir);

        Sair.setText("Sair");
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });
        Arquivo.add(Sair);

        MenuBar.add(Arquivo);

        Editar.setText("Editar");
        MenuBar.add(Editar);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decreaseZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseZoomActionPerformed
        if (shapeView != null) {
            shapeView.decreaseZoom();
        }
        double escala = 1 / shapeView.getShapeScale();
        scale.setText("1/" + Double.toString(escala));
        //scale.setText(Double.toString(shapeView.getShapeScale()));
    }//GEN-LAST:event_decreaseZoomActionPerformed

    private void increaseZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseZoomActionPerformed
        if (shapeView != null) {
            shapeView.increaseZoom();
        }
        double escala = 1 / shapeView.getShapeScale();
        scale.setText("1/" + Double.toString(escala));
        //scale.setText(Double.toString(shapeView.getShapeScale()));
    }//GEN-LAST:event_increaseZoomActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        File shapeFile = getFile();
        URL s;

        try {
            s = shapeFile.toURI().toURL();
            enderecoDBF = shapeFile.getAbsolutePath().substring(0, shapeFile.getAbsolutePath().length() - 4) + ".dbf";
            shapeView = new DisplayShapefile(s);
            shapeView.setSize(640, 640);
            desktopPane.add(shapeView);
            shapeView.setVisible(true);
        } catch (IOException ex) {
            //Logger.getLogger(Desktop.class.getName()).log(Level.SEVERE, null, ex);
        }
        double escala = 1 / shapeView.getShapeScale();
        scale.setText("1/" + Double.toString(escala));
}//GEN-LAST:event_AbrirActionPerformed

    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
        Object[] options = {"Sim", "Nao"};
        int n = JOptionPane.showOptionDialog(desktopPane,
                "Deseja realmente sair?",
                "Sair",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        if (n == 0) {
            System.exit(0);
        }
}//GEN-LAST:event_SairActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        if (shapeView != null) {
            shapeView.printShape();
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void TabelaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TabelaButtonActionPerformed
        try {
            //enderecoDBF = "C:/Users/André/Desktop/Visualizador/PA_VisualizadorDG/BACIAS~1/agua.dbf";
            int numeroLinhasDBF = DBFdata.numeroLinhas(enderecoDBF);
            int numeroColunasDBF = DBFdata.numeroColunas(enderecoDBF);

            tabelaDBF.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);// ativa barra de rolagem horizontal
            tabelaDBF.setModel(new ModeloTabela(DBFdata.cabecalhoTabela(enderecoDBF), numeroLinhasDBF, numeroColunasDBF));
            if(numeroColunasDBF < 19) {
                //define o tamanho das colunas em tabelas com numero pequeno de colunas
                for(int i=0; i< numeroColunasDBF; i++) {
                    tabelaDBF.getColumnModel().getColumn(i).setPreferredWidth((jPanel1.getWidth()/numeroColunasDBF)-7);
                }
            }

            InputStream stream = new BufferedInputStream(new FileInputStream(enderecoDBF));
            DBFReader dbf = new DBFReader(stream);

            for (int i = 1; i < numeroLinhasDBF; i++) {
                Object aobj[] = dbf.nextRecord();
                for (int j = 0; j < aobj.length; j++) {
                    if (aobj[j] == null) {
                        aobj[j] = "";
                    }
                    //System.out.println("TESTE DO OBJECT na linha: " + i + " com valor: " + aobj[j]);
                    tabelaDBF.setValueAt(aobj[j].toString(), (i - 1), j);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DesktopFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JDBFException ex) {
            Logger.getLogger(DesktopFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        JScrollPane scrollPane = new JScrollPane(tabelaDBF);
        scrollPane.setLocation(0, 0);
        scrollPane.setSize(jPanel1.getWidth()-2, 97);
        System.out.println("WIDTH="+jPanel1.getWidth());
        Dimension a = new Dimension(400, 98);       //Usado para definir o tamanho visível (sem uso do scroll) da tabela
        scrollPane.setPreferredSize(a);
        jPanel1.add(scrollPane);
        jPanel1.setVisible(true);

    }//GEN-LAST:event_TabelaButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenu Arquivo;
    private javax.swing.JMenu Editar;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Sair;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton decreaseZoom;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JButton increaseZoom;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printButton;
    private javax.swing.JTextArea scale;
    // End of variables declaration//GEN-END:variables

    //Metodo para selecionar o arquivo SHAPE
    private File getFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.addChoosableFileFilter(new ShapeFileFilter());
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.CANCEL_OPTION) {
            return null;
        }

        File fileName = fileChooser.getSelectedFile();

        if ((fileName == null) || (fileName.getName().equals(""))) {
            JOptionPane.showMessageDialog(this, "Nome Invalido", "ERRO", 0);
        }

        return fileName;
    }
}
